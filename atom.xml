<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鳄鱼守卫</title>
  
  <subtitle>share</subtitle>
  <link href="https://swagger-coder.github.io/atom.xml" rel="self"/>
  
  <link href="https://swagger-coder.github.io/"/>
  <updated>2022-06-03T11:02:35.358Z</updated>
  <id>https://swagger-coder.github.io/</id>
  
  <author>
    <name>Swagger Fei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python(三) 自动差异化和优化循环</title>
    <link href="https://swagger-coder.github.io/2022/06/03/Python-%E4%B8%89-%E8%87%AA%E5%8A%A8%E5%B7%AE%E5%BC%82%E5%8C%96/"/>
    <id>https://swagger-coder.github.io/2022/06/03/Python-%E4%B8%89-%E8%87%AA%E5%8A%A8%E5%B7%AE%E5%BC%82%E5%8C%96/</id>
    <published>2022-06-03T07:00:20.000Z</published>
    <updated>2022-06-03T11:02:35.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自动差异化"><a href="#自动差异化" class="headerlink" title="自动差异化"></a>自动差异化</h2><p>在训练神经网络时，最常用的算法是反向传播。在该算法中，参数（模型权重）根据损失函数相对于给定参数（w、b）的梯度进行调整。损失函数计算神经网络产生的预期输出和实际输出之间的差异，目标是使损失函数的结果尽可能接近于零。<br>该算法通过网络向后遍历以调整权重和偏差以重新训练模型。这就是为什么它被称为反向传播。这种随着时间的推移重新训练模型以将损失减少到 0 的前后过程称为梯度下降。</p><p>在Pytorch中，这一过程将由<code>torch.autograd</code>自动完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="comment"># 通过给张量指定requires_grad=True表示需要梯度下降</span></span><br><span class="line">x = torch.ones(<span class="number">5</span>)  <span class="comment"># input tensor</span></span><br><span class="line">y = torch.zeros(<span class="number">3</span>)  <span class="comment"># expected output</span></span><br><span class="line">w = torch.randn(<span class="number">5</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.randn(<span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">z = torch.matmul(x, w)+b <span class="comment"># 输出</span></span><br><span class="line">loss = torch.nn.functional.binary_cross_entropy_with_logits(z, y) <span class="comment"># 损失函数</span></span><br><span class="line"></span><br><span class="line">loss.backward() <span class="comment"># 计算梯度</span></span><br></pre></td></tr></table></figure><p>在调用<code>.backward()</code>后，<code>autograd</code>会填充一个新的图<br><img src="/2022/06/03/Python-%E4%B8%89-%E8%87%AA%E5%8A%A8%E5%B7%AE%E5%BC%82%E5%8C%96/5-autograd-1.png"></p><h3 id="禁用梯度跟踪"><a href="#禁用梯度跟踪" class="headerlink" title="禁用梯度跟踪"></a>禁用梯度跟踪</h3><p>通过<code>torch.no_grad()</code>停用梯度跟踪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">z = torch.matmul(x, w)+b</span><br><span class="line"><span class="built_in">print</span>(z.requires_grad) <span class="comment"># true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    z = torch.matmul(x, w)+b</span><br><span class="line"><span class="built_in">print</span>(z.requires_grad) <span class="comment"># false</span></span><br></pre></td></tr></table></figure><h2 id="优化循环"><a href="#优化循环" class="headerlink" title="优化循环"></a>优化循环</h2><h3 id="设置超参数-hyperparameters"><a href="#设置超参数-hyperparameters" class="headerlink" title="设置超参数(hyperparameters)"></a>设置超参数(hyperparameters)</h3><ul><li>epoch</li><li>batch size</li><li>learning rate</li></ul><h3 id="添加优化循环-optimization-loop"><a href="#添加优化循环-optimization-loop" class="headerlink" title="添加优化循环(optimization loop)"></a>添加优化循环(optimization loop)</h3><p>训练将由<code>epoch</code>构成，每个<code>epoch</code>都包含<code>train loop</code>和<code>validation loop</code>。</p><h3 id="添加损失函数"><a href="#添加损失函数" class="headerlink" title="添加损失函数"></a>添加损失函数</h3><p>计算实际输出和预期之间的相异程度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br></pre></td></tr></table></figure><h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p>优化器将决定如何来调整模型参数，提高准确率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)</span><br></pre></td></tr></table></figure><p>在训练循环中，优化器主要有三大作用：</p><ul><li>调用<code>optimizer.zero_grad()</code>重置模型参数的梯度矩阵（归零），梯度在默认情况下会相加。</li><li>通过调用<code>loss.backwards()</code>反向传播预测损失，Pytorch会存储每个参数的梯度。</li><li>通过调用<code>optimizer.step()</code>依据反向传播收集的梯度调整参数。<h3 id="保存模型"><a href="#保存模型" class="headerlink" title="保存模型"></a>保存模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">torch.save(model.state_dict(), <span class="string">&quot;data/model.pth&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Saved PyTorch Model State to model.pth&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><p>后续的加载模型和预测没什么概念性的知识，微软的教程写的真的很清晰，有时间建议自己手敲一遍，一般实操中也就在模型上会有不同。<br>教程来源：<a href="https://docs.microsoft.com/zh-cn/learn/paths/pytorch-fundamentals/">微软-pytorch基础知识</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;自动差异化&quot;&gt;&lt;a href=&quot;#自动差异化&quot; class=&quot;headerlink&quot; title=&quot;自动差异化&quot;&gt;&lt;/a&gt;自动差异化&lt;/h2&gt;&lt;p&gt;在训练神经网络时，最常用的算法是反向传播。在该算法中，参数（模型权重）根据损失函数相对于给定参数（w、b）的梯度进行</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Pytorch(二) 生成模型层</title>
    <link href="https://swagger-coder.github.io/2022/06/02/Pytorch-%E4%BA%8C-%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B%E5%B1%82/"/>
    <id>https://swagger-coder.github.io/2022/06/02/Pytorch-%E4%BA%8C-%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B%E5%B1%82/</id>
    <published>2022-06-02T12:51:50.000Z</published>
    <updated>2022-06-03T11:03:06.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是神经网络"><a href="#什么是神经网络" class="headerlink" title="什么是神经网络"></a>什么是神经网络</h2><p>神经网络是由层连接的神经元的集合。每个神经元都是一个小型计算单元，它执行简单的计算以共同解决一个问题。它们按层组织。有 3 种类型的层：输入层、隐藏层和外层。除输入层外，每一层都包含许多神经元。神经网络模仿人脑处理信息的方式<br><img src="/2022/06/02/Pytorch-%E4%BA%8C-%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B%E5%B1%82/4-model-1.png"></p><h2 id="神经网络的组件"><a href="#神经网络的组件" class="headerlink" title="神经网络的组件"></a>神经网络的组件</h2><ul><li><p>激活函数<br><br>决定一个神经元是否应该被激活。神经网络中发生的计算包括应用激活函数。如果一个神经元被激活，那么这意味着输入很重要。有很多不同种类的激活函数。使用哪个激活函数的选择取决于您想要的输出。激活函数的另一个重要作用是为模型添加非线性。</p><ul><li><code>Binary</code>：输出为正=1，输出为负=0</li><li><code>Sigmoid</code>：预测可能性，值在(0,1)</li><li><code>Tanh</code>：Tanh 用于预测输出节点是否介于 1 和 -1 之间。用于分类用例。</li><li><code>ReLU</code>：ReLU 用于在函数结果为负时将输出节点设置为 0，如果结果为正值则保留结果值。</li></ul></li><li><p>权重<br><br>权重会影响我们网络的输出与预期输出值的接近程度。当输入进入神经元时，它会乘以权重值，然后观察结果输出，或者将其传递到神经网络中的下一层。一层中所有神经元的权重被组织成一个张量。</p></li><li><p>偏差<br><br>偏差弥补了激活函数的输出与其预期输出之间的差异。低偏差表明网络对输出的形式做出了更多的假设，而高偏差值对输出的形式做出了较少的假设。</p></li></ul><h2 id="构建神经网络"><a href="#构建神经网络" class="headerlink" title="构建神经网络"></a>构建神经网络</h2><p>神经网络由<code>layers/modules</code>组成，在pytorch中，所有的<code>module</code>需要继承<code>nn.Module</code>，一个神经网络本身也是组合了很多层的一个<code>module</code>。</p><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><p>我们通过子类化 <code>nn.Module</code> 来定义我们的神经网络，并在 <code>__init__</code> 中初始化神经网络层。每个 <code>nn.Module </code>子类都在 <code>forward</code> 方法中实现对输入数据的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeuralNetwork</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(NeuralNetwork, self).__init__()</span><br><span class="line">        <span class="comment"># 平面化(bs, a, b) -&gt; (bs, a*b)</span></span><br><span class="line">        self.flatten = nn.Flatten()</span><br><span class="line">        <span class="comment"># nn.Sequential是有序的模块容器</span></span><br><span class="line">        self.linear_relu_stack = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">512</span>),  <span class="comment"># 线性层</span></span><br><span class="line">            nn.ReLU(),  <span class="comment"># 激活函数</span></span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">10</span>),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        logits = self.linear_relu_stack(x)</span><br><span class="line">        <span class="keyword">return</span> logits</span><br><span class="line"><span class="comment"># 应用模型</span></span><br><span class="line">X = torch.rand(<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, device=device)    <span class="comment"># input Size([1,28,28])</span></span><br><span class="line">logits = model(X)  <span class="comment"># output</span></span><br><span class="line">pred_probab = nn.Softmax(dim=<span class="number">1</span>)(logits) <span class="comment"># 激活函数，计算输出概率，仅用于输出层。dim 参数指示结果值总和必须为 1 的维度。</span></span><br><span class="line">y_pred = pred_probab.argmax(<span class="number">1</span>) <span class="comment"># 输出概率最高的节点</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Predicted class: <span class="subst">&#123;y_pred&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="模型参数"><a href="#模型参数" class="headerlink" title="模型参数"></a>模型参数</h2><h3 id="nn-linear"><a href="#nn-linear" class="headerlink" title="nn.linear"></a>nn.linear</h3><p>线性层会随机初始化<code>weights</code>和<code>bias</code>，并且在内部将值存储在张量中。<br><br>神经网络中的许多层都是参数化的，即具有在训练期间优化的相关权重和偏差。子类化 <code>nn.Module</code> 会自动跟踪模型对象中定义的所有字段，并使用模型的 <code>parameters()</code> 或 <code>named_pa​​rameters()</code> 方法使所有参数都可以访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Model structure: &quot;</span>, model, <span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Layer: <span class="subst">&#123;name&#125;</span> | Size: <span class="subst">&#123;param.size()&#125;</span> | Values : <span class="subst">&#123;param[:<span class="number">2</span>]&#125;</span> \n&quot;</span>)</span><br></pre></td></tr></table></figure><p>教程来源：<a href="https://docs.microsoft.com/zh-cn/learn/paths/pytorch-fundamentals/">微软-pytorch基础知识</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是神经网络&quot;&gt;&lt;a href=&quot;#什么是神经网络&quot; class=&quot;headerlink&quot; title=&quot;什么是神经网络&quot;&gt;&lt;/a&gt;什么是神经网络&lt;/h2&gt;&lt;p&gt;神经网络是由层连接的神经元的集合。每个神经元都是一个小型计算单元，它执行简单的计算以共同解决一个问题</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Pytorch(一) 什么是张量？</title>
    <link href="https://swagger-coder.github.io/2022/06/02/Pytorch-%E4%B8%80-%E4%BB%80%E4%B9%88%E6%98%AF%E5%BC%A0%E9%87%8F%EF%BC%9F/"/>
    <id>https://swagger-coder.github.io/2022/06/02/Pytorch-%E4%B8%80-%E4%BB%80%E4%B9%88%E6%98%AF%E5%BC%A0%E9%87%8F%EF%BC%9F/</id>
    <published>2022-06-02T08:22:11.000Z</published>
    <updated>2022-06-03T11:02:41.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>python</li><li>线性代数</li><li>numpy</li></ul><h2 id="初始化张量"><a href="#初始化张量" class="headerlink" title="初始化张量"></a>初始化张量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.直接从数据</span></span><br><span class="line">data = [[<span class="number">1</span>, <span class="number">2</span>],[<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">x_data = torch.tensor(data)</span><br><span class="line"><span class="comment"># 2.从numpy数组</span></span><br><span class="line">np_array = np.array(data)</span><br><span class="line">x_np = torch.from_numpy(np_array)</span><br><span class="line"><span class="comment"># 3.从另一个tensor</span></span><br><span class="line">x_ones = torch.ones_like(x_data) <span class="comment"># 保留原张量大小和数据类型</span></span><br><span class="line">x_rand = torch.rand_like(x_data, dtype=torch.long) <span class="comment"># 改变数据类型</span></span><br><span class="line"><span class="comment"># 4.具有随机或恒定值</span></span><br><span class="line">shape = (<span class="number">2</span>,<span class="number">3</span>,) <span class="comment"># tensor的维度</span></span><br><span class="line">rand_tensor = torch.rand(shape) <span class="comment"># 0-1之间</span></span><br><span class="line">ones_tensor = torch.ones(shape) <span class="comment"># 全1</span></span><br><span class="line">zeros_tensor = torch.zeros(shape) <span class="comment"># 全0</span></span><br><span class="line">rand_tensor = torch.rand(<span class="number">3</span>, <span class="number">4</span>) <span class="comment"># size[3,4] datatype: torch.float32</span></span><br></pre></td></tr></table></figure><h2 id="张量的属性"><a href="#张量的属性" class="headerlink" title="张量的属性"></a>张量的属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tensor = torch.rand(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">tensor.shape <span class="comment"># torch.Size([3, 4])</span></span><br><span class="line">tensor.dtype <span class="comment"># torch.float32</span></span><br></pre></td></tr></table></figure><h2 id="张量的操作"><a href="#张量的操作" class="headerlink" title="张量的操作"></a>张量的操作</h2><h3 id="类似numpy的索引和切片"><a href="#类似numpy的索引和切片" class="headerlink" title="类似numpy的索引和切片"></a>类似numpy的索引和切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor = torch.ones(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">tensor[<span class="number">0</span>] <span class="comment"># First row</span></span><br><span class="line">tensor[:, <span class="number">0</span>] <span class="comment"># First column</span></span><br><span class="line">tensor[..., -<span class="number">1</span>] <span class="comment"># Last column</span></span><br><span class="line">tensor[:,<span class="number">1</span>] = <span class="number">0</span> <span class="comment"># 第1列设为0</span></span><br></pre></td></tr></table></figure><h3 id="tensor拼接"><a href="#tensor拼接" class="headerlink" title="tensor拼接"></a>tensor拼接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t1 = torch.cat([tensor, tensor, tensor], dim=<span class="number">1</span>) <span class="comment"># dim=1按列拼接，行数不变；dim=0按行拼接，列数不变</span></span><br></pre></td></tr></table></figure><h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This computes the matrix multiplication between two tensors. y1, y2, y3 will have the same value 矩阵乘法</span></span><br><span class="line">y1 = tensor @ tensor.T</span><br><span class="line">y2 = tensor.matmul(tensor.T)</span><br><span class="line"></span><br><span class="line">y3 = torch.rand_like(tensor)</span><br><span class="line">torch.matmul(tensor, tensor.T, out=y3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># This computes the element-wise product. z1, z2, z3 will have the same value 对应位置元素相乘</span></span><br><span class="line">z1 = tensor * tensor</span><br><span class="line">z2 = tensor.mul(tensor)</span><br><span class="line"></span><br><span class="line">z3 = torch.rand_like(tensor)</span><br><span class="line">torch.mul(tensor, tensor, out=z3)</span><br></pre></td></tr></table></figure><h3 id="原地操作"><a href="#原地操作" class="headerlink" title="原地操作"></a>原地操作</h3><p>不鼓励使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有元素加5</span></span><br><span class="line">tensor.add_(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>教程来源：<a href="https://docs.microsoft.com/zh-cn/learn/paths/pytorch-fundamentals/">微软-pytorch基础知识</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;线性代数&lt;/li&gt;
&lt;li&gt;numpy&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;初</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>transformer--Preprocess</title>
    <link href="https://swagger-coder.github.io/2022/05/27/transformer-Preprocess/"/>
    <id>https://swagger-coder.github.io/2022/05/27/transformer-Preprocess/</id>
    <published>2022-05-27T06:13:36.000Z</published>
    <updated>2022-06-02T08:22:38.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>在把数据放入模型之前，先要进行预处理，将文本、图像、音频转换为模型能够处理的张量。</p><h2 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h2><p>在NLP中，最常用的预处理工具是<code>tokenizer</code>(分词器)，分词器就是将句子分割成词，然后将词按照词典对应到唯一的数字。首先搞清楚<code>tokenizer</code>的输入和输出：<br></p><ul><li><code>input</code>：单个文本，多个文本或文本列表。需要注意文本列表返回的张量会改变维度</li><li><code>output</code>：包含<code>input_ids</code>、<code>attention_mask</code>、<code>token_type_ids</code>的字典<ul><li><code>input_ids</code>：句子中每个词对应的索引</li><li><code>attention_mask</code>：指示信息的有用性（填充的为0）</li><li><code>token_type_ids</code>：多个句子时指示索引属于哪个句子</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;预处理&quot;&gt;&lt;a href=&quot;#预处理&quot; class=&quot;headerlink&quot; title=&quot;预处理&quot;&gt;&lt;/a&gt;预处理&lt;/h2&gt;&lt;p&gt;在把数据放入模型之前，先要进行预处理，将文本、图像、音频转换为模型能够处理的张量。&lt;/p&gt;
&lt;h2 id=&quot;NLP&quot;&gt;&lt;a href</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>简历培训</title>
    <link href="https://swagger-coder.github.io/2022/05/25/%E7%AE%80%E5%8E%86%E5%9F%B9%E8%AE%AD/"/>
    <id>https://swagger-coder.github.io/2022/05/25/%E7%AE%80%E5%8E%86%E5%9F%B9%E8%AE%AD/</id>
    <published>2022-05-25T11:05:29.000Z</published>
    <updated>2022-05-25T16:00:13.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="好简历背后的逻辑"><a href="#好简历背后的逻辑" class="headerlink" title="好简历背后的逻辑"></a>好简历背后的逻辑</h2><p>专属、定位、精准</p><h4 id="亮点突出"><a href="#亮点突出" class="headerlink" title="亮点突出"></a>亮点突出</h4><p>岗位导向、结果导向、权重导向<br><br>就个人而言，先要选择好岗位（研发or管理等）<br><img src="/2022/05/25/%E7%AE%80%E5%8E%86%E5%9F%B9%E8%AE%AD/1.png"></p><h4 id="细节支撑"><a href="#细节支撑" class="headerlink" title="细节支撑"></a>细节支撑</h4><ul><li>时间</li><li>地点</li><li>人物</li><li>事件</li><li>数据<br>要写实打实的，可以经得住拷问<br><br><img src="/2022/05/25/%E7%AE%80%E5%8E%86%E5%9F%B9%E8%AE%AD/2.png"></li></ul><h4 id="格式整洁"><a href="#格式整洁" class="headerlink" title="格式整洁"></a>格式整洁</h4><p>精简、详略得当</p><h4 id="真实可信"><a href="#真实可信" class="headerlink" title="真实可信"></a>真实可信</h4><p>可包装不能浮夸</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;好简历背后的逻辑&quot;&gt;&lt;a href=&quot;#好简历背后的逻辑&quot; class=&quot;headerlink&quot; title=&quot;好简历背后的逻辑&quot;&gt;&lt;/a&gt;好简历背后的逻辑&lt;/h2&gt;&lt;p&gt;专属、定位、精准&lt;/p&gt;
&lt;h4 id=&quot;亮点突出&quot;&gt;&lt;a href=&quot;#亮点突出&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>STQA 移动应用测试学习笔记</title>
    <link href="https://swagger-coder.github.io/2022/05/25/STQA-%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://swagger-coder.github.io/2022/05/25/STQA-%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-05-25T01:35:49.000Z</published>
    <updated>2022-05-25T02:57:36.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>1.含mooctest插件的eclipse<br><br>2.jdk<br><br>3.Android SDK<br><br>4.Node.js<br><br>5.Appium<br><br>6.安卓模拟器（<a href="https://mumu.163.com/index.html">mumu</a>、雷电模拟器等）<br><br>7.判断所有环境配置成功<br></p><h2 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h2><h4 id="1-APP控件定位工具"><a href="#1-APP控件定位工具" class="headerlink" title="1. APP控件定位工具"></a>1. APP控件定位工具</h4><ul><li>打开安卓模拟器，<code>adb devices</code>测试手机是否与电脑连接（mumu<code>adb connect 127.0.0.1:7555</code>）</li><li>打开定位工具，我的安装目录在<code>C:\Program Files\android-sdk-windows\tools</code>，找到<code>uiautomatorviewer.bat</code>，即可截取手机屏幕，获取控件信息</li></ul><h4 id="2-控件定位方式"><a href="#2-控件定位方式" class="headerlink" title="2. 控件定位方式"></a>2. 控件定位方式</h4><ul><li>ById：有唯一resource-id<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver.findElementById(&quot;com.alensw.PicFolder:id/search&quot;).click();</span><br><span class="line">driver.findElementById(&quot;com.alensw.PicFolder:id/search&quot;).sendKeys(&quot;hello&quot;);</span><br></pre></td></tr></table></figure></li><li>ByXPath：通过class+text/index/content-desc（推荐）获取<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver.findElementByXPath(&quot;//android.widget.TextView[@text=&#x27;相册&#x27;]&quot;).click();</span><br><span class="line">driver.findElementByXPath(&quot;//android.widget.EditText[@index=&#x27;0&#x27;]&quot;).click();</span><br><span class="line">driver.findElementByXPath(&quot;//android.widget.ImageButton[@content-desc=&#x27;向上导航&#x27;]&quot;).click();</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-流程"><a href="#3-流程" class="headerlink" title="3. 流程"></a>3. 流程</h4><ul><li>打开模拟器，安装好apk</li><li>adb连接模拟器和电脑</li><li>打开Appium</li><li>打开APP控件定位工具</li><li>编写代码</li></ul><p>附上<a href="https://www.aliyundrive.com/s/PLwbADzoqc9">测试环境配置和脚本编写ppt</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;p&gt;1.含mooctest插件的eclipse&lt;br&gt;&lt;br&gt;2.jdk&lt;br&gt;&lt;br&gt;3.Android SDK&lt;br&gt;&lt;br</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>微信大数据挑战赛学习笔记</title>
    <link href="https://swagger-coder.github.io/2022/05/23/%E5%BE%AE%E4%BF%A1%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8C%91%E6%88%98%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://swagger-coder.github.io/2022/05/23/%E5%BE%AE%E4%BF%A1%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8C%91%E6%88%98%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-05-23T14:25:28.000Z</published>
    <updated>2022-06-02T08:22:34.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些常识"><a href="#一些常识" class="headerlink" title="一些常识"></a>一些常识</h2><ul><li>mask<br><br>是相对于PAD而产生的技术，只有0和1两个值，0表示的值对应PAD矩阵中对应位置的值无意义。<h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><img src="/2022/05/23/%E5%BE%AE%E4%BF%A1%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8C%91%E6%88%98%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png"><br>想要有好的结果，首先要对数据进行预处理，可以看到，有用信息就是String类型：title，asr，ocr和float类型：frames_feature</li></ul><p>tokenizer就是分词器</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>什么是预训练模型（hfl/chinese-macbert-base）</li><li>什么是对抗</li><li>ema？指数滑动平均</li><li>怎么换模型，chinese-roberta-wwm-ext</li><li>fgm<br><br><a href="https://github.com/rsanshierli/Bert-Classification-EMA-AD/blob/master/FGM.py">https://github.com/rsanshierli/Bert-Classification-EMA-AD/blob/master/FGM.py</a></li></ul><h2 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h2><ul><li>对抗</li><li>ema</li><li>fgm</li><li>学习率更新</li></ul><h2 id="一些小坑"><a href="#一些小坑" class="headerlink" title="一些小坑"></a>一些小坑</h2><ul><li>线上线下分数差距大<br><br>原因是验证集划分不均，和训练集相似度过高</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一些常识&quot;&gt;&lt;a href=&quot;#一些常识&quot; class=&quot;headerlink&quot; title=&quot;一些常识&quot;&gt;&lt;/a&gt;一些常识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;mask&lt;br&gt;&lt;br&gt;是相对于PAD而产生的技术，只有0和1两个值，0表示的值对应PAD矩阵中对应位置的值无意</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tornado 学习笔记（一）</title>
    <link href="https://swagger-coder.github.io/2022/05/11/tornado-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://swagger-coder.github.io/2022/05/11/tornado-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-05-11T14:13:42.000Z</published>
    <updated>2022-05-15T03:54:43.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tornado是如何做到高并发的"><a href="#tornado是如何做到高并发的" class="headerlink" title="tornado是如何做到高并发的"></a>tornado是如何做到高并发的</h2><ul><li>异步非阻塞io</li><li>基于epoll的<strong>事件循环</strong><br><br>win不支持</li><li><strong>协程</strong>提高了代码的可读性<blockquote><p>事件循环和协程究竟是什么呢？</p></blockquote></li></ul><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;tornado是如何做到高并发的&quot;&gt;&lt;a href=&quot;#tornado是如何做到高并发的&quot; class=&quot;headerlink&quot; title=&quot;tornado是如何做到高并发的&quot;&gt;&lt;/a&gt;tornado是如何做到高并发的&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;异步非阻塞io&lt;</summary>
      
    
    
    
    
    <category term="tornado" scheme="https://swagger-coder.github.io/tags/tornado/"/>
    
  </entry>
  
  <entry>
    <title>Python virtualenv的安装配置</title>
    <link href="https://swagger-coder.github.io/2022/05/11/Python-virtualenv%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>https://swagger-coder.github.io/2022/05/11/Python-virtualenv%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</id>
    <published>2022-05-11T10:51:07.000Z</published>
    <updated>2022-05-11T13:38:28.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>通过pip安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure><p>并安装virtualenvwrapper，方便管理虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#win系统安装</span></span><br><span class="line">pip install virtualenvwrapper-win</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建虚拟环境 默认地址在 C:\Users\username\Envs</span></span><br><span class="line">mkvirtualenv envname</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出虚拟环境</span></span><br><span class="line">deactivate</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入指定虚拟环境</span></span><br><span class="line">workon envname</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定虚拟环境python版本</span></span><br><span class="line">mkvirtualenv -p [pypath] envname</span><br></pre></td></tr></table></figure><p>虚拟环境配置好之后记得在开发的时候选择虚拟环境中的python解释器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;通过pip安装&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte</summary>
      
    
    
    
    
    <category term="python" scheme="https://swagger-coder.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ffmpy3+pyqt5+nginx推拉流实验</title>
    <link href="https://swagger-coder.github.io/2022/05/07/ffmpeg/"/>
    <id>https://swagger-coder.github.io/2022/05/07/ffmpeg/</id>
    <published>2022-05-07T08:49:57.000Z</published>
    <updated>2022-05-08T14:41:16.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><ul><li><p>搭建自己的nginx-http-flv 视频转发服务器</p></li><li><p>采用ffmpy3编写推流客户端</p><ul><li>学习FFmpeg的命令，完成摄像头、桌面、麦克风和扬声器采集和推流功能</li></ul></li><li><p>采用pyqt编写拉流客户端</p><ul><li>学习Bilibili的flv.js或python-vlc控件的使用</li></ul></li></ul><h1 id="nginx-Ubuntu配置"><a href="#nginx-Ubuntu配置" class="headerlink" title="nginx Ubuntu配置"></a>nginx Ubuntu配置</h1><p>基础安装配置可以看这篇博客<a href="https://blog.csdn.net/weixin_46139896/article/details/124384630?spm=1001.2014.3001.5502">Nginx与nginx-http-flv-module安装–VMware–Ubuntu–Xshell–Xftp</a><br>在吃透这篇博客的基础上，需要对nginx的配置文件进行配置，以支持直播<br>进入/usr/local/nginx/conf目录，配置nginx.conf文件，这是我的配置，里面的端口号需要注意一下（rtmp和http服务器的端口号对应推流拉流）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">rtmp &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 9999;  # 接受推流的端口号</span><br><span class="line">        chunk_size 8192; # 单一推流数据包的最大容量？</span><br><span class="line">        application myapp &#123; # myapp 模块，可以自行更换名字</span><br><span class="line">            live on; # 打开直播</span><br><span class="line">            # 非常重要， 设定让ngnix断开阻塞中的连接， 才能触发exec_record_done</span><br><span class="line">            # 以及客户端的LFLiveKit reconnectCount自动重新连接才会好用</span><br><span class="line">            drop_idle_publisher 5s;</span><br><span class="line">            meta off; # 为了兼容网页前端的 flv.js，设置为 off 可以避免报错</span><br><span class="line">            gop_cache on; # 支持GOP缓存，以减少首屏时间</span><br><span class="line">            allow play all; # 允许来自任何 ip 的人拉流</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        location /live &#123; # 拉流时的 uri ，可以自行修改</span><br><span class="line">            flv_live on; # 打开 http-flv 服务</span><br><span class="line">            chunked_transfer_encoding on;</span><br><span class="line">            add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;; # 允许跨域</span><br><span class="line">            add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="ffmpy3"><a href="#ffmpy3" class="headerlink" title="ffmpy3"></a>ffmpy3</h1><p>本质是对ffmpeg的封装所以只要掌握ffmpeg的常用指令就能很快入手ffmpy3<br>这里入门推荐<a href="https://www.ruanyifeng.com/blog/2020/01/ffmpeg.html">阮一峰的教程</a></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg [全局参数] [输入文件参数] -i [输入文件] [输出文件参数] [输出文件]</span><br></pre></td></tr></table></figure><p>可以通过以下具体栗子了解用法</p><h2 id="桌面推流"><a href="#桌面推流" class="headerlink" title="桌面推流"></a>桌面推流</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg </span><br><span class="line">-f gdigrab -video_size 1920x1080 -i desktop </span><br><span class="line">-r 20 -vf scale=1920x1080 -vcodec libx264 -preset ultrafast -pix_fmt yuv420p</span><br><span class="line">-f flv rtmp://192.168.79.129:9999/myapp/mystream</span><br></pre></td></tr></table></figure><p><strong>代码说明</strong></p><ul><li><code>-f</code>：后面写输入输出文件的格式 </li><li><code>gdigrab</code>：Win32 GDI-based screen capture device. <br><ul><li>抓取win桌面<br><code>ffmpeg -f gdigrab -framerate 6 -i desktop out.mpg</code></li><li>抓取某个窗口<br><code>ffmpeg -f gdigrab -framerate 6 -i title=Calculator out.mpg</code></li></ul></li><li><code>-video_size 1920x1080</code>：设置抓取窗口大小为1920*1080像素</li><li><code>-i desktop</code>：指定输入为桌面</li><li><code>-r 20</code>：设置输出帧率为20、<code>-vf scale=</code>：设置视频输出的分辨率、<code>-vcodec libx264</code>：设置输出视频编码为libx264、<code>-preset ultrafast</code>：设置编码速度为极快</li><li><code>-f flv</code>：设置输出地址为直播推流地址</li></ul><h2 id="桌面-音频推流"><a href="#桌面-音频推流" class="headerlink" title="桌面+音频推流"></a>桌面+音频推流</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -list_devices <span class="literal">true</span> -f dshow -i dummy</span><br></pre></td></tr></table></figure><p><strong>代码说明</strong></p><ul><li>这条指令是查看本机的设备信息，因为麦克风、摄像头作为输入都需要名称。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg </span><br><span class="line">-f gdigrab -i desktop </span><br><span class="line">-f dshow -i audio=<span class="string">&quot;麦克风 (Realtek(R) Audio)&quot;</span> </span><br><span class="line">-s 1920x1080 -r 20 </span><br><span class="line">-vcodec libx264 -preset ultrafast </span><br><span class="line">-acodec aac -ac 2 -ar 44100 -ab 128k -pix_fmt yuv420p </span><br><span class="line">-f flv rtmp://192.168.79.129:9999/myapp/mystream</span><br></pre></td></tr></table></figure></li></ul><p><strong>代码说明</strong></p><ul><li><code>-f dshow</code>：Windows DirectShow input device. </li><li><code>-s 1920x1080</code>：表示输出分辨率为1920*1080（类似上文<code>-vf scale</code>）</li><li><code>-acodec aac</code>：设置音频编码为aac、<code>-ac 2</code>：设置音频通道数为2、<code>-ar 44100</code>：设置音频采样率为44100、<code>-ab 128k</code>：设置比特率为128k bit/s、<code>-pix_fmt yuv420p</code>：设置视频编码解码格式为yuv420p</li></ul><h2 id="摄像头"><a href="#摄像头" class="headerlink" title="摄像头"></a>摄像头</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg </span><br><span class="line">-f dshow -i video=<span class="string">&quot;USB2.0 HD UVC WebCam&quot;</span> </span><br><span class="line">-r 20 -s 640x480 -vcodec libx264 -preset ultrafast </span><br><span class="line">-f flv rtmp://192.168.79.129:9999/myapp/mystream</span><br></pre></td></tr></table></figure><p><strong>代码说明</strong><br><br>不会的再去看看上面的讲解哦</p><h2 id="桌面-摄像头画中画"><a href="#桌面-摄像头画中画" class="headerlink" title="桌面+摄像头画中画"></a>桌面+摄像头画中画</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg </span><br><span class="line">-f gdigrab -i desktop </span><br><span class="line">-f dshow -i video=<span class="string">&quot;USB2.0 HD UVC WebCam&quot;</span> </span><br><span class="line">-filter_complex <span class="string">&quot;[1:v]scale=w=640:h=480:force_original_aspect_ratio=decrease[top];[0:v][top]overlay=1300:540&quot;</span> </span><br><span class="line">-vcodec libx264 -preset ultrafast </span><br><span class="line">-acodec aac -movflags faststart -ar 44100 -ac 2 -s 1920x1080 </span><br><span class="line">-f flv rtmp://192.168.79.129:9999/myapp/mystream</span><br></pre></td></tr></table></figure><p><strong>代码说明</strong></p><ul><li><code>-filter_complex</code>：混合视频参数<ul><li><code>[1:v]scale=w=640:h=480:force_original_aspect_ratio=decrease[top]</code> [1:v]表示取视频下标为1的视频（0:桌面，1:摄像头）, <code>scale</code>表示缩放为640*480, <code>force_original_aspect_ratio=decrease</code>表示等比例缩放, [top]为视频修改后的别名</li><li><code>[0:v][top]overlay=1300:540</code> 表示覆盖，第0层在最下方、top层在上方，1300:540表示top层的偏移量（和第0层左上角的偏移量，0:0表示和第0层重合）</li></ul></li></ul><h2 id="ffmpy3使用"><a href="#ffmpy3使用" class="headerlink" title="ffmpy3使用"></a>ffmpy3使用</h2><p>直接上示例，这是桌面+摄像头画中画推流</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ffmpy3 <span class="keyword">import</span> FFmpeg</span><br><span class="line"></span><br><span class="line">ff = FFmpeg(</span><br><span class="line">        inputs=&#123;<span class="string">&#x27;desktop&#x27;</span>: <span class="string">&#x27;-f gdigrab -video_size 1920x1080&#x27;</span>, <span class="string">&quot;video=USB2.0 HD UVC WebCam&quot;</span>:<span class="string">&#x27;-f dshow&#x27;</span>&#125;,</span><br><span class="line">        outputs=&#123;<span class="string">&#x27;rtmp://192.168.79.129:9999/myapp/mystream&#x27;</span>: <span class="string">&#x27;-filter_complex &quot;[1:v]scale=w=640:h=480:force_original_aspect_ratio=decrease[top];[0:v][top]overlay=1300:540&quot; -vcodec libx264 -preset ultrafast -acodec aac -movflags faststart -ar 44100 -ac 2 -s 1920x1080 -f flv&#x27;</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(ff.cmd) <span class="comment"># 结果和桌面+摄像头画中画栗子中的ffmpeg命令是一样的</span></span><br><span class="line">ff.run()</span><br></pre></td></tr></table></figure><p>从上面的栗子中不难看出ffmpy3的语法规则，直接模仿就行。</p><h1 id="pyqt5-flv-js-拉流"><a href="#pyqt5-flv-js-拉流" class="headerlink" title="pyqt5+flv.js 拉流"></a>pyqt5+flv.js 拉流</h1><p>这里pyqt的思路就是加载一个网页，这里先用本地的网页。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWebEngineWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span>(<span class="params">QMainWindow</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MainWindow, self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;加载本地网页&#x27;</span>)</span><br><span class="line">        self.setGeometry(<span class="number">70</span>,<span class="number">70</span>,<span class="number">1500</span>,<span class="number">750</span>)<span class="comment">#窗口的初始位置和大小</span></span><br><span class="line">        self.browser=QWebEngineView()</span><br><span class="line">        <span class="comment">#加载本地html</span></span><br><span class="line">        self.browser.load(QUrl(QFileInfo(<span class="string">&quot;D:/Projects/直播项目/推拉流/index.html&quot;</span>).absoluteFilePath()))</span><br><span class="line">        self.setCentralWidget(self.browser)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app=QApplication(sys.argv)</span><br><span class="line">    win=MainWindow()</span><br><span class="line">    win.show()</span><br><span class="line">    app.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>flv.js的具体用法就不多说了，可以参照<a href="https://github.com/bilibili/flv.js/blob/master/docs/api.md">api文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flv.js demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.mainContainer</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.urlInput</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.centeredVideo</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">576px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.controls</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mainContainer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;videoElement&quot;</span> <span class="attr">class</span>=<span class="string">&quot;centeredVideo&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">width</span>=<span class="string">&quot;1024&quot;</span> <span class="attr">height</span>=<span class="string">&quot;768&quot;</span>&gt;</span>Your browser is too</span><br><span class="line">            old which doesn&#x27;t support HTML5 video.<span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;flv_start()&quot;</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;flv_pause()&quot;</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;flv_destroy()&quot;</span>&gt;</span>停止<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">&quot;width:100px&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;seekpoint&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;flv_seekto()&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- flv.min.js需要自己下载放到对应目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;flv.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> player = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;videoElement&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (flvjs.isSupported()) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> flvPlayer = flvjs.createPlayer(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>: <span class="string">&#x27;flv&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">isLive</span>: <span class="literal">true</span>, <span class="comment">// 如果是直播流需要设置这个值为 true</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://192.168.79.129:8080/live?port=9999&amp;app=myapp&amp;stream=mystream&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">            flvPlayer.attachMediaElement(videoElement);</span></span><br><span class="line"><span class="javascript">            flvPlayer.load(); <span class="comment">//加载</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">flv_start</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            player.play();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">flv_pause</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            player.pause();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">flv_destroy</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            player.pause();</span></span><br><span class="line"><span class="javascript">            player.unload();</span></span><br><span class="line"><span class="javascript">            player.detachMediaElement();</span></span><br><span class="line"><span class="javascript">            player.destroy();</span></span><br><span class="line"><span class="javascript">            player = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">flv_seekto</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            player.currentTime = <span class="built_in">parseFloat</span>(<span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;seekpoint&#x27;</span>)[<span class="number">0</span>].value);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实验要求&quot;&gt;&lt;a href=&quot;#实验要求&quot; class=&quot;headerlink&quot; title=&quot;实验要求&quot;&gt;&lt;/a&gt;实验要求&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;搭建自己的nginx-http-flv 视频转发服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;采用ffmpy3</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c++算法入门</title>
    <link href="https://swagger-coder.github.io/2022/05/05/c-%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <id>https://swagger-coder.github.io/2022/05/05/c-%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/</id>
    <published>2022-05-05T01:58:09.000Z</published>
    <updated>2022-05-12T02:58:47.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul><li>要求$10^9$以内或说32位整数，用int型存放；</li><li>若是$10^{18}$以内或说64位整数，用long long型存放 (%d)；</li><li>对于浮点型，统一用double来存储 (%2f)；</li><li>字符型，小写字母比大写字母的ASCII码值大32 （%c）；</li><li>字符串型，C语言风格：赋初值给字符数组，并用%s输出；</li><li>常量有<code>#define pi 3.14</code> 和 <code>const double pi=3.14</code> 两种，推荐使用<code>const</code>定义；</li><li>整型相除仍然得到整型</li><li>条件运算符 A ? B : C<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a,b) ((a) &gt; (b) ? (a) : (b))</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>首先要知道地址的概念，计算机中变量都是存储在内存地址中的，在C语言中可以通过<code>&amp;</code>获取变量对应的地址。</li><li>指针表示的是内存地址（或称指针指向内存地址），且指针是各<code>unsigned</code>类型的整数。</li><li>指针变量用来存储指针，将<code>*</code>作为开关。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a); <span class="comment">//输出a变量的地址</span></span><br><span class="line"><span class="keyword">int</span> *p = &amp;a; <span class="comment">// 指针变量p指向a变量的地址</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h3><ul><li>数组的内存地址是连续的</li><li>数组名称可以作为数组的首地址使用（即<code>int a[20]</code>中的<code>a</code>可以看作指向<code>a[0]</code>的指针，<code>a === &amp;a[0]</code>）</li><li>则<code>*(a+i)</code>就等价于<code>a[i]</code></li><li>并且指针之差表示的是两个带类型单位的距离</li><li>可以将指针作为函数参数，使原始数据发生改变（只有在获取地址的情况下对元素进行操作，才能真正地修改变量）<br>由此我们可以枚举数组中的元素。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> *p = a; p &lt; a+<span class="number">10</span>; p++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, *p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul><li>这是<code>c++</code>中的语法</li><li>引用不产生副本，对引用变量的操作就是对原变量的操作</li><li>使用方法：在函数参数类型后面加<code>&amp;</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;要求$10^9$以内或说32位整数，用int型存放；&lt;/li&gt;
&lt;li&gt;若是$10^{18}$以</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo图片无法正常加载</title>
    <link href="https://swagger-coder.github.io/2022/05/02/hexo%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%8A%A0%E8%BD%BD/"/>
    <id>https://swagger-coder.github.io/2022/05/02/hexo%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%8A%A0%E8%BD%BD/</id>
    <published>2022-05-02T05:08:03.000Z</published>
    <updated>2022-05-02T14:29:17.349Z</updated>
    
    <content type="html"><![CDATA[<p>本次通过以下几步使之正常加载</p><ul><li><p>配置<code>_config.yml</code>中 <code>post_asset_folder: true</code></p></li><li><p>安装<code>hexo-asset-image-for-hexo5</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image-for-hexo5 --save</span><br></pre></td></tr></table></figure><p>这次npm出现了网络问题，通过<code>npm config set proxy null</code>解决</p></li><li><p>使用markdown正常语法<code>![]()</code>插入图片即可</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本次通过以下几步使之正常加载&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;配置&lt;code&gt;_config.yml&lt;/code&gt;中 &lt;code&gt;post_asset_folder: true&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装&lt;code&gt;hexo-asset-image</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://swagger-coder.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>远程登录Ubuntu虚拟机</title>
    <link href="https://swagger-coder.github.io/2022/05/02/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>https://swagger-coder.github.io/2022/05/02/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/</id>
    <published>2022-05-02T04:01:12.000Z</published>
    <updated>2022-05-02T05:06:38.129Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于大学生比较穷租不起服务器，平时可以在虚拟机上进行实验。</p><h2 id="虚拟机防火墙配置"><a href="#虚拟机防火墙配置" class="headerlink" title="虚拟机防火墙配置"></a>虚拟机防火墙配置</h2><ul><li><p>关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure></li><li><p>查看是否安装ssh-server服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dpkg -l | grep ssh</span><br></pre></td></tr></table></figure><div class="justified-gallery"><p><img src="/2022/05/02/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/1.png"></p>          </div><p>这种情况是只装了默认的ssh-client</p><blockquote><p><code>SSH</code></p><ul><li>Secure Shell（安全外壳协议，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。</li><li>SSH通过在网络中创建安全隧道来实现SSH客户端与服务器之间的连接。</li><li>SSH最常见的用途是远程登录系统，人们通常利用SSH来传输命令行界面和远程执行命令。SSH使用频率最高的场合是类Unix系统.<br>详情见<a href="https://zh.wikipedia.org/zh-cn/Secure_Shell">维基</a></li></ul></blockquote></li><li><p>（若未安装）安装ssh-server服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install openssh-server</span><br><span class="line">$ dpkg -l | grep ssh <span class="comment">#上一步安装完成后</span></span><br></pre></td></tr></table></figure><p>若安装后如下所示，说明安装成功<br><img src="/2022/05/02/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/2.png"></p></li><li><p>确认启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e | grep ssh</span><br></pre></td></tr></table></figure><p><img src="/2022/05/02/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/3.png"></p></li><li><p>查看虚拟机ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ip a</span><br></pre></td></tr></table></figure><p>或者直接在<code>wired setting</code>中查看即可<br><img src="/2022/05/02/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/5.png"></p><h2 id="通过Xshell远程访问"><a href="#通过Xshell远程访问" class="headerlink" title="通过Xshell远程访问"></a>通过Xshell远程访问</h2></li><li><p>安装 <br></p><p>可以下载<a href="https://www.xshell.com/zh/free-for-home-school/">家庭/学校免费版</a>。</p></li><li><p>登录<br>只需要在下图主机部分填入虚拟机的ip，其他默认设置即可<br><img src="/2022/05/02/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/4.png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;鉴于大学生比较穷租不起服务器，平时可以在虚拟机上进行实验。&lt;/p&gt;
&lt;h2 id=&quot;虚拟机防火墙配置&quot;&gt;&lt;a href=&quot;#虚拟机防火墙配置&quot; class=&quot;headerlink&quot; title=&quot;虚拟机防火墙配置&quot;&gt;&lt;/a&gt;虚拟机防火墙配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://swagger-coder.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>awk命令详解</title>
    <link href="https://swagger-coder.github.io/2022/04/30/awk%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>https://swagger-coder.github.io/2022/04/30/awk%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-04-30T13:40:01.000Z</published>
    <updated>2022-05-01T11:27:46.064Z</updated>
    
    <content type="html"><![CDATA[<p><code>grep</code>、<code>awk</code>、<code>sed</code>作为<code>Linux</code>三剑客，在文本处理方面有着极为重要的地位。本文将通过实例介绍<code>awk</code>的常用场景。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>以下是<code>awk</code>运行的语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk [选项参数] <span class="string">&#x27;BEGIN&#123;&#125; [pattern]&#123;&#125; END&#123;&#125;&#x27;</span> file</span><br><span class="line">或 </span><br><span class="line">awk [选项参数] -f scriptfile file</span><br></pre></td></tr></table></figure><p><code>awk</code>脚本语法解释：<code>BEGIN&#123;&#125;</code>和<code>END&#123;&#125;</code>语句块分别只会在运行开始、运行结束时执行，也就是整个过程运行一次；而<code>[pattern]&#123;&#125;</code> 会对每一行匹配执行。</p><h3 id="选项参数说明"><a href="#选项参数说明" class="headerlink" title="选项参数说明"></a>选项参数说明</h3><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><strong>-F fs</strong></td><td align="center">指定输入文件的分隔符，如-F : ，默认为空格</td></tr><tr><td align="center">-f scriptfile</td><td align="center">从脚本中读取awk命令</td></tr><tr><td align="center">-v var=value</td><td align="center">赋值一个用户定义变量</td></tr></tbody></table><p>这几个参数较常用，其他可见菜鸟教程 <a href="https://www.runoob.com/linux/linux-comm-awk.html">Linux awk 命令</a></p><blockquote><p>栗子1</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1:2:4&quot;</span> | awk -F : <span class="string">&#x27;BEGIN&#123;print &quot;result:&quot;&#125; $3 &gt; 3 &#123;print $1+$2&#125; END&#123;print &quot;end&quot;&#125;&#x27;</span> <span class="comment">#输出3 </span></span><br></pre></td></tr></table></figure><h2 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h2><p><code>awk</code>的一些内置变量能方便我们获取文本的信息，以下给出一些常见的内置变量。</p><table><thead><tr><th align="center">变量</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$n</td><td align="center">当前记录的第n个字段</td></tr><tr><td align="center">$0</td><td align="center">当前行完整的记录</td></tr><tr><td align="center">NF</td><td align="center">当前行内的字段数量</td></tr><tr><td align="center">NR</td><td align="center">已经读出的记录数，也就是当前行号</td></tr><tr><td align="center">NF</td><td align="center">赋值一个用户定义变量</td></tr></tbody></table><blockquote><p>栗子2</p></blockquote><p>test1.txt中存有以下內容：<br><br>Besh  4.00  0 <br><br>Dan   3.75  0<br><br>Kathy 4.00  10<br><br>Mark  5.00  20<br><br>Mary  5.50  22<br><br>Susie 4.25  18<br></p><ul><li><p>当第3列大于0时，输出文本中对应行的第 1 列和第 2 列与第 3 列之积</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;$3 &gt; 0 &#123;print $1, $2 * $3 &#125;&#x27;</span> ./test1.txt</span><br></pre></td></tr></table></figure></li><li><p>统计第 3 列大于 15 的行数，记为 X，并以下列格式输出 “X employees worked more than 15 hours.”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN &#123;X=0&#125; $3 &gt; 15 &#123;X=X + 1&#125; END &#123; print X,&quot; employees worked more than 15 hours&quot;&#125;&#x27;</span> ./test1.txt</span><br></pre></td></tr></table></figure></li><li><p>使用特殊变量 NR、NF，统计输出整个文本的行数、单词数和字符数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scriptfile</span></span><br><span class="line">&#123; nc = nc + length(<span class="variable">$0</span>) + 1</span><br><span class="line">  nw = nw + NF</span><br><span class="line">&#125;</span><br><span class="line">END &#123;<span class="built_in">print</span> NR, <span class="string">&quot;lines&quot;</span>, nw, <span class="string">&quot;words&quot;</span>, nc, <span class="string">&quot;characters&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># bash</span></span><br><span class="line">awk -f scriptfile ./test1.txt</span><br></pre></td></tr></table></figure></li></ul><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p><code>awk</code>还提供了一些内置函数，方便对原始数据的处理，这里将结合例子给出具体用法。</p><h3 id="index-String1-String2"><a href="#index-String1-String2" class="headerlink" title="index(String1, String2)"></a>index(String1, String2)</h3><p><strong>参数说明</strong>：在<code>String1</code>中查找<code>String2</code>，返回<code>String2</code>出现的位置，从 1 开始编号。如果 <code>String2</code> 参数不在 <code>String1</code> 参数中出现，则返回 0（零）。</p><blockquote><p>栗子3</p></blockquote><p>使用 awk 统计/etc/passwd 文件中，登陆 shell 为“/sbin/nologin”的用户个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若登录shell不为/sbin/nologin，index()返回0，不执行 user = user + 1</span></span><br><span class="line">awk <span class="string">&#x27;index($0, &quot;/sbin/nologin&quot;) &#123;user = user + 1&#125; END &#123;print user, &quot; users login shell is /sbin/nologin&quot;&#125;&#x27;</span> ./passwd</span><br></pre></td></tr></table></figure><p><strong>其他说明：</strong><code>/etc/psaawd</code>是Linux关键安全文件之一。Linux操作系统中所有的用户账户记录都在该文件中。具体格式为：<code>username:password:uid:gid:userinfo:home:shell</code></p><h3 id="split-String-arr-Ere"><a href="#split-String-arr-Ere" class="headerlink" title="split(String, arr, [Ere])"></a>split(String, arr, [Ere])</h3><p><strong>参数说明：</strong> 将<code>String</code>按照<code>Ere</code>分隔后存入数组<code>arr</code></p><blockquote><p>栗子4</p></blockquote><p>使用 awk 统计/etc/passwd 文件中，用户名包含’g’的用户，打印出用户名和 UID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每一行按照&quot;:&quot;分隔，通过索引访问元素</span></span><br><span class="line"><span class="comment"># arr[1]为username，arr[3]为uid</span></span><br><span class="line">awk <span class="string">&#x27;&#123;split($0, arr, &quot;:&quot;); if (index(arr[1], &quot;g&quot;)) print &quot;username: &quot;, arr[1], &quot; uid: &quot;, arr[3]&#125;&#x27;</span> ./passwd</span><br></pre></td></tr></table></figure><p>其他常用的函数如下：</p><ul><li><code>tolower()</code>：字符转为小写。</li><li><code>toupper()</code>：字符转为大写。</li><li><code>length()</code>：返回字符串长度。</li><li><code>substr()</code>：返回子字符串。</li><li><code>sin()</code>：正弦。</li><li><code>cos()</code>：余弦。</li><li><code>sqrt()</code>：平方根。</li><li><code>rand()</code>：随机数。</li></ul><p><code>awk</code>内置函数的完整列表，可以查看<a href="https://www.gnu.org/software/gawk/manual/html_node/Built_002din.html#Built_002din">手册</a>或<a href="https://www.runoob.com/w3cnote/awk-built-in-functions.html#b2">菜鸟教程</a></p><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p><code>awk</code>提供了<code>if</code>结构，在上面的栗子中已经有所涉及，这里在补充一下<code>else</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;if ($1 &gt; &quot;m&quot;) print $1; else print &quot;---&quot;&#125;&#x27;</span> demo.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;grep&lt;/code&gt;、&lt;code&gt;awk&lt;/code&gt;、&lt;code&gt;sed&lt;/code&gt;作为&lt;code&gt;Linux&lt;/code&gt;三剑客，在文本处理方面有着极为重要的地位。本文将通过实例介绍&lt;code&gt;awk&lt;/code&gt;的常用场景。&lt;/p&gt;
&lt;h2 id=&quot;语</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://swagger-coder.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
