<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鳄鱼守卫</title>
  
  <subtitle>share</subtitle>
  <link href="https://swagger-coder.github.io/atom.xml" rel="self"/>
  
  <link href="https://swagger-coder.github.io/"/>
  <updated>2022-05-02T05:14:38.325Z</updated>
  <id>https://swagger-coder.github.io/</id>
  
  <author>
    <name>Swagger Fei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo图片无法正常加载</title>
    <link href="https://swagger-coder.github.io/2022/05/02/hexo%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%8A%A0%E8%BD%BD/"/>
    <id>https://swagger-coder.github.io/2022/05/02/hexo%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%8A%A0%E8%BD%BD/</id>
    <published>2022-05-02T05:08:03.000Z</published>
    <updated>2022-05-02T05:14:38.325Z</updated>
    
    <content type="html"><![CDATA[<p>本次通过以下几步使之正常加载</p><ul><li><p>配置<code>_config.yml</code>中 <code>post_asset_folder: true</code></p></li><li><p>安装<code>hexo-asset-image-for-hexo5</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image-for-hexo5 --save</span><br></pre></td></tr></table></figure><p>这次npm出现了网络问题，通过<code>npm config set proxy null</code>解决</p></li><li><p>使用markdown正常语法<code>![]()</code>插入图片即可</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本次通过以下几步使之正常加载&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;配置&lt;code&gt;_config.yml&lt;/code&gt;中 &lt;code&gt;post_asset_folder: true&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装&lt;code&gt;hexo-asset-image</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://swagger-coder.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>远程登录Ubuntu虚拟机</title>
    <link href="https://swagger-coder.github.io/2022/05/02/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>https://swagger-coder.github.io/2022/05/02/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/</id>
    <published>2022-05-02T04:01:12.000Z</published>
    <updated>2022-05-02T05:06:38.129Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于大学生比较穷租不起服务器，平时可以在虚拟机上进行实验。</p><h2 id="虚拟机防火墙配置"><a href="#虚拟机防火墙配置" class="headerlink" title="虚拟机防火墙配置"></a>虚拟机防火墙配置</h2><ul><li><p>关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure></li><li><p>查看是否安装ssh-server服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dpkg -l | grep ssh</span><br></pre></td></tr></table></figure><div class="justified-gallery"><p><img src="/2022/05/02/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/1.png"></p>          </div><p>这种情况是只装了默认的ssh-client</p><blockquote><p><code>SSH</code></p><ul><li>Secure Shell（安全外壳协议，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。</li><li>SSH通过在网络中创建安全隧道来实现SSH客户端与服务器之间的连接。</li><li>SSH最常见的用途是远程登录系统，人们通常利用SSH来传输命令行界面和远程执行命令。SSH使用频率最高的场合是类Unix系统.<br>详情见<a href="https://zh.wikipedia.org/zh-cn/Secure_Shell">维基</a></li></ul></blockquote></li><li><p>（若未安装）安装ssh-server服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install openssh-server</span><br><span class="line">$ dpkg -l | grep ssh <span class="comment">#上一步安装完成后</span></span><br></pre></td></tr></table></figure><p>若安装后如下所示，说明安装成功<br><img src="/2022/05/02/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/2.png"></p></li><li><p>确认启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e | grep ssh</span><br></pre></td></tr></table></figure><p><img src="/2022/05/02/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/3.png"></p></li><li><p>查看虚拟机ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ip a</span><br></pre></td></tr></table></figure><p>或者直接在<code>wired setting</code>中查看即可<br><img src="/2022/05/02/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/5.png"></p><h2 id="通过Xshell远程访问"><a href="#通过Xshell远程访问" class="headerlink" title="通过Xshell远程访问"></a>通过Xshell远程访问</h2></li><li><p>安装 <br></p><p>可以下载<a href="https://www.xshell.com/zh/free-for-home-school/">家庭/学校免费版</a>。</p></li><li><p>登录<br>只需要在下图主机部分填入虚拟机的ip，其他默认设置即可<br><img src="/2022/05/02/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA/4.png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;鉴于大学生比较穷租不起服务器，平时可以在虚拟机上进行实验。&lt;/p&gt;
&lt;h2 id=&quot;虚拟机防火墙配置&quot;&gt;&lt;a href=&quot;#虚拟机防火墙配置&quot; class=&quot;headerlink&quot; title=&quot;虚拟机防火墙配置&quot;&gt;&lt;/a&gt;虚拟机防火墙配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://swagger-coder.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>awk命令详解</title>
    <link href="https://swagger-coder.github.io/2022/04/30/awk%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>https://swagger-coder.github.io/2022/04/30/awk%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-04-30T13:40:01.000Z</published>
    <updated>2022-05-01T11:27:46.064Z</updated>
    
    <content type="html"><![CDATA[<p><code>grep</code>、<code>awk</code>、<code>sed</code>作为<code>Linux</code>三剑客，在文本处理方面有着极为重要的地位。本文将通过实例介绍<code>awk</code>的常用场景。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>以下是<code>awk</code>运行的语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk [选项参数] <span class="string">&#x27;BEGIN&#123;&#125; [pattern]&#123;&#125; END&#123;&#125;&#x27;</span> file</span><br><span class="line">或 </span><br><span class="line">awk [选项参数] -f scriptfile file</span><br></pre></td></tr></table></figure><p><code>awk</code>脚本语法解释：<code>BEGIN&#123;&#125;</code>和<code>END&#123;&#125;</code>语句块分别只会在运行开始、运行结束时执行，也就是整个过程运行一次；而<code>[pattern]&#123;&#125;</code> 会对每一行匹配执行。</p><h3 id="选项参数说明"><a href="#选项参数说明" class="headerlink" title="选项参数说明"></a>选项参数说明</h3><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><strong>-F fs</strong></td><td align="center">指定输入文件的分隔符，如-F : ，默认为空格</td></tr><tr><td align="center">-f scriptfile</td><td align="center">从脚本中读取awk命令</td></tr><tr><td align="center">-v var=value</td><td align="center">赋值一个用户定义变量</td></tr></tbody></table><p>这几个参数较常用，其他可见菜鸟教程 <a href="https://www.runoob.com/linux/linux-comm-awk.html">Linux awk 命令</a></p><blockquote><p>栗子1</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1:2:4&quot;</span> | awk -F : <span class="string">&#x27;BEGIN&#123;print &quot;result:&quot;&#125; $3 &gt; 3 &#123;print $1+$2&#125; END&#123;print &quot;end&quot;&#125;&#x27;</span> <span class="comment">#输出3 </span></span><br></pre></td></tr></table></figure><h2 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h2><p><code>awk</code>的一些内置变量能方便我们获取文本的信息，以下给出一些常见的内置变量。</p><table><thead><tr><th align="center">变量</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$n</td><td align="center">当前记录的第n个字段</td></tr><tr><td align="center">$0</td><td align="center">当前行完整的记录</td></tr><tr><td align="center">NF</td><td align="center">当前行内的字段数量</td></tr><tr><td align="center">NR</td><td align="center">已经读出的记录数，也就是当前行号</td></tr><tr><td align="center">NF</td><td align="center">赋值一个用户定义变量</td></tr></tbody></table><blockquote><p>栗子2</p></blockquote><p>test1.txt中存有以下內容：<br><br>Besh  4.00  0 <br><br>Dan   3.75  0<br><br>Kathy 4.00  10<br><br>Mark  5.00  20<br><br>Mary  5.50  22<br><br>Susie 4.25  18<br></p><ul><li><p>当第3列大于0时，输出文本中对应行的第 1 列和第 2 列与第 3 列之积</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;$3 &gt; 0 &#123;print $1, $2 * $3 &#125;&#x27;</span> ./test1.txt</span><br></pre></td></tr></table></figure></li><li><p>统计第 3 列大于 15 的行数，记为 X，并以下列格式输出 “X employees worked more than 15 hours.”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN &#123;X=0&#125; $3 &gt; 15 &#123;X=X + 1&#125; END &#123; print X,&quot; employees worked more than 15 hours&quot;&#125;&#x27;</span> ./test1.txt</span><br></pre></td></tr></table></figure></li><li><p>使用特殊变量 NR、NF，统计输出整个文本的行数、单词数和字符数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scriptfile</span></span><br><span class="line">&#123; nc = nc + length(<span class="variable">$0</span>) + 1</span><br><span class="line">  nw = nw + NF</span><br><span class="line">&#125;</span><br><span class="line">END &#123;<span class="built_in">print</span> NR, <span class="string">&quot;lines&quot;</span>, nw, <span class="string">&quot;words&quot;</span>, nc, <span class="string">&quot;characters&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># bash</span></span><br><span class="line">awk -f scriptfile ./test1.txt</span><br></pre></td></tr></table></figure></li></ul><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p><code>awk</code>还提供了一些内置函数，方便对原始数据的处理，这里将结合例子给出具体用法。</p><h3 id="index-String1-String2"><a href="#index-String1-String2" class="headerlink" title="index(String1, String2)"></a>index(String1, String2)</h3><p><strong>参数说明</strong>：在<code>String1</code>中查找<code>String2</code>，返回<code>String2</code>出现的位置，从 1 开始编号。如果 <code>String2</code> 参数不在 <code>String1</code> 参数中出现，则返回 0（零）。</p><blockquote><p>栗子3</p></blockquote><p>使用 awk 统计/etc/passwd 文件中，登陆 shell 为“/sbin/nologin”的用户个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若登录shell不为/sbin/nologin，index()返回0，不执行 user = user + 1</span></span><br><span class="line">awk <span class="string">&#x27;index($0, &quot;/sbin/nologin&quot;) &#123;user = user + 1&#125; END &#123;print user, &quot; users login shell is /sbin/nologin&quot;&#125;&#x27;</span> ./passwd</span><br></pre></td></tr></table></figure><p><strong>其他说明：</strong><code>/etc/psaawd</code>是Linux关键安全文件之一。Linux操作系统中所有的用户账户记录都在该文件中。具体格式为：<code>username:password:uid:gid:userinfo:home:shell</code></p><h3 id="split-String-arr-Ere"><a href="#split-String-arr-Ere" class="headerlink" title="split(String, arr, [Ere])"></a>split(String, arr, [Ere])</h3><p><strong>参数说明：</strong> 将<code>String</code>按照<code>Ere</code>分隔后存入数组<code>arr</code></p><blockquote><p>栗子4</p></blockquote><p>使用 awk 统计/etc/passwd 文件中，用户名包含’g’的用户，打印出用户名和 UID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每一行按照&quot;:&quot;分隔，通过索引访问元素</span></span><br><span class="line"><span class="comment"># arr[1]为username，arr[3]为uid</span></span><br><span class="line">awk <span class="string">&#x27;&#123;split($0, arr, &quot;:&quot;); if (index(arr[1], &quot;g&quot;)) print &quot;username: &quot;, arr[1], &quot; uid: &quot;, arr[3]&#125;&#x27;</span> ./passwd</span><br></pre></td></tr></table></figure><p>其他常用的函数如下：</p><ul><li><code>tolower()</code>：字符转为小写。</li><li><code>toupper()</code>：字符转为大写。</li><li><code>length()</code>：返回字符串长度。</li><li><code>substr()</code>：返回子字符串。</li><li><code>sin()</code>：正弦。</li><li><code>cos()</code>：余弦。</li><li><code>sqrt()</code>：平方根。</li><li><code>rand()</code>：随机数。</li></ul><p><code>awk</code>内置函数的完整列表，可以查看<a href="https://www.gnu.org/software/gawk/manual/html_node/Built_002din.html#Built_002din">手册</a>或<a href="https://www.runoob.com/w3cnote/awk-built-in-functions.html#b2">菜鸟教程</a></p><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p><code>awk</code>提供了<code>if</code>结构，在上面的栗子中已经有所涉及，这里在补充一下<code>else</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;if ($1 &gt; &quot;m&quot;) print $1; else print &quot;---&quot;&#125;&#x27;</span> demo.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;grep&lt;/code&gt;、&lt;code&gt;awk&lt;/code&gt;、&lt;code&gt;sed&lt;/code&gt;作为&lt;code&gt;Linux&lt;/code&gt;三剑客，在文本处理方面有着极为重要的地位。本文将通过实例介绍&lt;code&gt;awk&lt;/code&gt;的常用场景。&lt;/p&gt;
&lt;h2 id=&quot;语</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://swagger-coder.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
